---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Installation and setup of Nova
  hosts: nova_all
  max_fail_percentage: 20
  user: root
  pre_tasks:
    - name: Use the lxc-openstack aa profile
      lxc_container:
        name: "{{ container_name }}"
        container_config:
          - "lxc.aa_profile=lxc-openstack"
      delegate_to: "{{ physical_host }}"
      when: not is_metal | bool
      register: container_config
      tags:
        - lxc-aa-profile
    - name: Wait for container ssh
      wait_for:
        port: "22"
        delay: "{{ ssh_delay }}"
        search_regex: "OpenSSH"
        host: "{{ ansible_ssh_host }}"
      delegate_to: "{{ physical_host }}"
      when: container_config is defined and container_config | changed
      register: ssh_wait_check
      until: ssh_wait_check | success
      retries: 3
      tags:
        - ssh-wait
    - name: Sort the rabbitmq servers
      dist_sort:
        value_to_lookup: "{{ container_name }}"
        ref_list: "{{ groups['nova_all'] }}"
        src_list: "{{ rabbitmq_servers }}"
      register: servers
      tags:
        - always
    - name: Set rabbitmq servers
      set_fact:
        rabbitmq_servers: "{{ servers.sorted_list }}"
      tags:
        - always
    - name: Add nbd devices to the compute
      shell: |
        for i in /dev/nbd*;do
          lxc-device -n {{ container_name }} add $i $i
        done
      failed_when: false
      register: device_add
      changed_when: >
        'added' in device_add.stdout.lower()
      delegate_to: "{{ physical_host }}"
      when:
        - "inventory_hostname in groups['nova_compute']"
        - "not is_metal | bool"
      tags:
        - nova-kvm
        - nova-kvm-container-devices
    - name: Add net/tun device to the compute
      shell: |
        lxc-device -n {{ container_name }} add /dev/net/tun /dev/net/tun
      delegate_to: "{{ physical_host }}"
      when:
        - "inventory_hostname in groups['nova_compute']"
        - "not is_metal | bool"
      tags:
        - nova-kvm
        - nova-kvm-container-devices
    - name: Check if kvm device exists
      stat:
        path: /dev/kvm
      delegate_to: "{{ physical_host }}"
      register: kvm_device
      when:
        - "inventory_hostname in groups['nova_compute']"
        - "not is_metal | bool"
      tags:
        - nova-kvm
        - nova-kvm-container-devices
    - name: Add kvm device to the compute
      shell: |
        lxc-device -n {{ container_name }} add /dev/kvm /dev/kvm
      delegate_to: "{{ physical_host }}"
      register: device_add
      failed_when: false
      changed_when: >
        'added' in device_add.stdout.lower()
      when:
        - "inventory_hostname in groups['nova_compute']"
        - "not is_metal | bool"
        - kvm_device.stat.ischr is defined and kvm_device.stat.ischr
      tags:
        - nova-kvm
        - nova-kvm-container-devices
    - name: Create log dir
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - { path: "/openstack/log/{{ inventory_hostname }}-nova" }
      when: is_metal | bool
      tags:
        - nova-logs
        - nova-log-dirs
    - name: Create log aggregation links
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: "{{ item.state }}"
        force: "yes"
      with_items:
        - { src: "/openstack/log/{{ inventory_hostname }}-nova", dest: "/var/log/nova", state: "link" }
      when: is_metal | bool
      tags:
        - nova-logs
    - name: Ensure Rabbitmq vhost
      rabbitmq_vhost:
        name: "{{ nova_rabbitmq_vhost }}"
        state: "present"
      delegate_to: "{{ groups['rabbitmq_all'][0] }}"
      when:
        - inventory_hostname == groups['nova_all'][0]
        - groups['rabbitmq_all']|length > 0
      tags:
        - nova-rabbitmq
        - nova-rabbitmq-vhost
    - name: Ensure rabbitmq user
      rabbitmq_user:
        user: "{{ nova_rabbitmq_userid }}"
        password: "{{ nova_rabbitmq_password }}"
        vhost: "{{ nova_rabbitmq_vhost }}"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        state: "present"
      delegate_to: "{{ groups['rabbitmq_all'][0] }}"
      when:
        - inventory_hostname == groups['nova_all'][0]
        - groups['rabbitmq_all']|length > 0
      tags:
        - nova-rabbitmq
        - nova-rabbitmq-user
    - name: Set nova management bridge (is_metal)
      set_fact:
        management_bridge: "{{ 'ansible_' + hostvars[inventory_hostname]['management_bridge'] | replace('-', '_') }}"
      when:
        - "hostvars[inventory_hostname]['management_bridge'] is defined"
        - "is_metal | bool"
      tags:
        - nova-config
    - name: Set nova management address (is_metal)
      set_fact:
        management_address: "{{ hostvars[inventory_hostname][management_bridge]['ipv4']['address'] }}"
      when:
        - "hostvars[inventory_hostname][management_bridge]['ipv4']['address'] is defined"
        - "is_metal | bool"
      tags:
        - nova-config
    - name: Set nova management address (container)
      set_fact:
        management_address: "{{ hostvars[inventory_hostname]['container_networks']['container_address']['address'] }}"
      when:
        - "management_address is undefined"
        - "hostvars[inventory_hostname]['container_networks']['container_address']['address'] is defined"
        - "not is_metal | bool"
      tags:
        - nova-config
    - name: Set nova management address (unknown management network)
      set_fact:
        management_address: "{{ ansible_ssh_host }}"
      when:
        - "management_address is undefined"
      tags:
        - nova-config
    - name: Set nova venv download url for non-ppc64le
      set_fact:
        nova_download_url: "{{ openstack_repo_url }}/venvs/{{ openstack_release }}/{{ ansible_distribution | lower }}/nova-{{ openstack_release }}.tgz"
      when:
        - ansible_architecture != 'ppc64le'
      tags:
        - nova-config
    - name: Set nova venv download url for ppc64le
      set_fact:
        nova_download_url: "{{ openstack_repo_url }}/venvs/{{ openstack_release }}/{{ ansible_distribution | lower }}/nova-{{ openstack_release }}-{{ ansible_architecture }}.tgz"
      when:
        - ansible_architecture == 'ppc64le'
      tags:
        - nova-config
  roles:
    - role: "os_nova"
      nova_novncproxy_git_repo: "{{ openstack_repo_git_url }}/novnc"
      nova_novncproxy_git_install_branch: "{{ novncproxy_git_install_branch }}"
      nova_spicehtml5_git_repo: "{{ openstack_repo_git_url }}/spice-html5"
      nova_spicehtml5_git_install_branch: "{{ spicehtml5_git_install_branch }}"
      nova_galera_address: "{{ galera_address }}"
      nova_api_galera_address: "{{ galera_address }}"
      nova_management_address: "{{ management_address }}"
      nova_venv_tag: "{{ openstack_release }}"
      nova_venv_download_url: "{{ nova_download_url }}"
      tags:
        - "os-nova"
    - role: "ceph_client"
      nova_venv_bin: "/openstack/venvs/nova-{{ openstack_release }}/bin"
      openstack_service_system_user: "{{ nova_system_user_name }}"
      openstack_service_venv_bin: "{{ nova_venv_bin if nova_venv_enabled|default(True) else None }}"
      tags:
        - "nova-ceph-client"
        - "ceph-client"
    - role: "openstack_openrc"
      tags:
        - "openstack-openrc"
    - role: "rsyslog_client"
      rsyslog_client_log_rotate_file: nova_log_rotate
      rsyslog_client_log_dir: "/var/log/nova"
      rsyslog_client_config_name: "99-nova-rsyslog-client.conf"
      tags:
        - "nova-rsyslog-client"
        - "rsyslog-client"
    - role: "system_crontab_coordination"
      tags:
        - "system-crontab-coordination"
  vars_files:
    - defaults/repo_packages/openstack_other.yml
  vars:
    galera_address: "{{ internal_lb_vip_address }}"
    is_metal: "{{ properties.is_metal|default(false) }}"
    glance_host: "{{ internal_lb_vip_address }}"
    nova_rabbitmq_userid: nova
    nova_rabbitmq_vhost: /nova
    nova_rabbitmq_servers: "{{ rabbitmq_servers }}"
    nova_rabbitmq_port: "{{ rabbitmq_port }}"
    nova_rabbitmq_use_ssl: "{{ rabbitmq_use_ssl }}"
