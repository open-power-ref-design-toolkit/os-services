---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Add Ubuntu Cloud Archive keyring
  apt:
    pkg: ubuntu-cloud-keyring
    state: "{{ neutron_package_state }}"
  register: add_uca_keys
  when: neutron_uca_enable | bool

- name: Add Ubuntu Cloud Archive Repository
  apt_repository:
    repo: "{{ uca_repo }}"
    state: present
  register: add_uca_repo
  when: neutron_uca_enable | bool

#TODO(evrardjp): Replace the next 2 tasks by a standard apt with cache
#when https://github.com/ansible/ansible-modules-core/pull/1517 is merged
#in 1.9.x or we move to 2.0 (if tested working)
- name: Check apt last update file
  stat:
    path: /var/cache/apt
  register: apt_cache_stat

- name: Update apt if needed
  apt:
    update_cache: yes
  when: ("ansible_date_time.epoch|float - apt_cache_stat.stat.mtime > {{cache_timeout}}" or
        add_uca_keys | changed or add_uca_repo | changed)


# This tries to reload the UCA since it maybe corrupt and the source of the errors
- name: Reload UCA
  shell: |
    # Loop until these three files are present:
    # ubuntu-cloud.archive.canonical.com_ubuntu_dists_xenial-updates_newton_main_binary-ppc64el_Packages
    # ubuntu-cloud.archive.canonical.com_ubuntu_dists_xenial-updates_newton_Release
    # ubuntu-cloud.archive.canonical.com_ubuntu_dists_xenial-updates_newton_Release.gpg

    APT_DIR='/var/lib/apt/lists'
    UCA_FILES_PAT='ubuntu-cloud.archive.canonical.com_ubuntu_dists_*-updates_*_*'
    FIND_CMD="find $APT_DIR -name $UCA_FILES_PAT"

    FILE_COUNT=$($FIND_CMD | wc -w)
    if [ $FILE_COUNT -gt 0 ]; then
      while [ $FILE_COUNT -lt 3 ]; do
        echo "Sleep"
        sleep 120
        echo "Remove existing files."
        rm $APT_DIR/$UCA_FILES_PAT
        echo "Update apt."
        apt-get update
        FILE_COUNT=$($FIND_CMD | wc -w)
      done
    fi
  args:
    executable: /bin/bash
  when: neutron_uca_enable | bool

- name: Install neutron apt dependencies
  apt:
    pkg: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_distro_packages }}"

- name: Install apt packages for LXB
  apt:
    pkg: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_lxb_distro_packages }}"
  when:
    - neutron_services['neutron-linuxbridge-agent']['group'] in group_names
    - neutron_services['neutron-linuxbridge-agent'].service_en | bool

- name: Install apt packages for OVS
  apt:
    pkg: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_ovs_distro_packages }}"
  when:
    - neutron_services['neutron-openvswitch-agent']['group'] in group_names
    - neutron_services['neutron-openvswitch-agent'].service_en | bool

- name: Install apt packages for LBaaS
  apt:
    pkg: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_lbaas_distro_packages }}"
  when:
    - neutron_services['neutron-lbaasv2-agent']['group'] in group_names
    - neutron_lbaasv2 | bool

- name: Install apt packages for VPNaaS
  apt:
    pkg: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_vpnaas_distro_packages }}"
  when:
    - neutron_services['neutron-vpnaas-agent']['group'] in group_names
    - neutron_vpnaas | bool

- name: Remove known problem packages
  apt:
    pkg: "{{ item }}"
    state: absent
  register: remove_packages
  until: remove_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_remove_distro_packages }}"
