---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#TODO(evrardjp): Replace the next 2 tasks by a standard apt with cache
#when https://github.com/ansible/ansible-modules-core/pull/1517 is merged
#in 1.9.x or we move to 2.0 (if tested working)
- name: Check apt last update file
  stat:
    path: /var/cache/apt
  register: apt_cache_stat

- name: Update apt if needed
  apt:
    update_cache: yes
  when: ("ansible_date_time.epoch|float - apt_cache_stat.stat.mtime > {{cache_timeout}}" or
        add_uca_keys | changed or add_uca_repo | changed)

- name: Install neutron distro dependencies
  package:
    name: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_distro_packages }}"

- name: Install distro packages for LXB
  package:
    name: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_lxb_distro_packages }}"
  when:
    - neutron_services['neutron-linuxbridge-agent']['group'] in group_names
    - neutron_services['neutron-linuxbridge-agent'].service_en | bool

- name: Install distro packages for OVS
  package:
    name: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_ovs_distro_packages }}"
  when:
    - neutron_services['neutron-openvswitch-agent']['group'] in group_names
    - neutron_services['neutron-openvswitch-agent'].service_en | bool

- name: Install distro packages for LBaaS
  package:
    name: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_lbaas_distro_packages }}"
  when:
    - neutron_services['neutron-lbaasv2-agent']['group'] in group_names
    - neutron_lbaasv2 | bool

- name: Install distro packages for VPNaaS
  package:
    name: "{{ item }}"
    state: "{{ neutron_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_vpnaas_distro_packages }}"
  when:
    - neutron_services['neutron-vpnaas-agent']['group'] in group_names
    - neutron_vpnaas | bool

- name: Remove known problem packages
  package:
    name: "{{ item }}"
    state: absent
  register: remove_packages
  until: remove_packages|success
  retries: 5
  delay: 2
  with_items: "{{ neutron_remove_distro_packages }}"

- name: Create developer mode constraint file
  copy:
    dest: "/opt/developer-pip-constraints.txt"
    content: |
      {% for item in neutron_developer_constraints %}
      {{ item }}
      {% endfor %}
  when: neutron_developer_mode | bool

- name: Install requires pip packages
  pip:
    name: "{{ neutron_requires_pip_packages | join(' ') }}"
    state: latest
    extra_args: >-
      {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
      {{ pip_install_options | default('') }}
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2

- name: Retrieve checksum for venv download
  uri:
    url: "{{ neutron_venv_download_url | replace('tgz', 'checksum') }}"
    return_content: yes
  register: neutron_venv_checksum
  when: not neutron_developer_mode | bool

- name: Attempt venv download
  get_url:
    url: "{{ neutron_venv_download_url }}"
    dest: "/var/cache/{{ neutron_venv_download_url | basename }}"
    checksum: "sha1:{{ neutron_venv_checksum.content | trim }}"
  register: neutron_get_venv
  when: not neutron_developer_mode | bool

- name: Remove existing venv
  file:
    path: "{{ neutron_bin | dirname }}"
    state: absent
  when: neutron_get_venv | changed

- name: Create neutron venv dir
  file:
    path: "{{ neutron_bin | dirname }}"
    state: directory
  register: neutron_venv_dir
  when: not neutron_developer_mode | bool

- name: Unarchive pre-built venv
  unarchive:
    src: "/var/cache/{{ neutron_venv_download_url | basename }}"
    dest: "{{ neutron_bin | dirname }}"
    copy: "no"
  when:
    - not neutron_developer_mode | bool
    - neutron_get_venv | changed or neutron_venv_dir | changed
  notify: Restart neutron services

- name: Install pip packages
  pip:
    name: "{{ neutron_pip_packages | join(' ') }}"
    state: latest
    virtualenv: "{{ neutron_bin | dirname }}"
    virtualenv_site_packages: "no"
    extra_args: >-
      {{ neutron_developer_mode | ternary('--constraint /opt/developer-pip-constraints.txt', '') }}
      {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
      {{ pip_install_options | default('') }}
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  when: neutron_developer_mode | bool
  notify: Restart neutron services

- name: Update virtualenv path
  command: >
    virtualenv-tools --update-path=auto --reinitialize {{ neutron_bin | dirname }}
  when:
    - not neutron_developer_mode | bool
    - neutron_get_venv | changed or neutron_venv_dir | changed

- name: Install optional pip packages
  pip:
    name: >-
      {{ (neutron_bgp | bool) | ternary(neutron_optional_bgp_pip_packages | join(' '), '') }}
      {{ (neutron_fwaas | bool) | ternary(neutron_optional_fwaas_pip_packages | join(' '), '') }}
      {{ (neutron_lbaasv2 | bool) | ternary(neutron_optional_lbaas_pip_packages | join(' '), '') }}
      {{ (neutron_vpnaas | bool) | ternary(neutron_optional_vpnaas_pip_packages | join(' '), '') }}
    state: latest
    virtualenv: "{{ neutron_bin | dirname }}"
    virtualenv_site_packages: "no"
    extra_args: >-
      {{ neutron_developer_mode | ternary('--constraint /opt/developer-pip-constraints.txt', '') }}
      {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
      {{ pip_install_options | default('') }}
  when: neutron_bgp | bool or
        neutron_fwaas | bool or
        neutron_lbaasv2 | bool or
        neutron_vpnaas | bool
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  notify: Restart neutron services
