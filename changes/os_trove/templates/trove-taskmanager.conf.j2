#{{ ansible_managed }}
# Do not edit this file manually, your changes will be overwritten.
[DEFAULT]
debug = {{ debug }}
update_status_on_fail = True
rpc_backend={{ trove_rpc_backend }}
transport_url = rabbit://{% for host in trove_rabbitmq_servers.split(',') %}{{ trove_rabbitmq_userid }}:{{ trove_rabbitmq_password }}@{{ host }}:{{ trove_rabbitmq_port }}{% if not loop.last %},{% else %}/{{ trove_rabbitmq_vhost }}{% endif %}{% endfor %}

{# There must be a blank line above or the following line will be appended to the previous. #}
control_exchange = {{ trove_control_exchange }}
db_api_implementation = trove.db.sqlalchemy.api
trove_auth_url = {{ trove_auth_url }}
nova_compute_url = {{ trove_nova_compute_url }}
cinder_url = {{ trove_cinder_url }}
swift_url = {{ trove_swift_url }}
neutron_url = {{ trove_neutron_url }}
os_region_name = {{ trove_service_region }}
nova_compute_service_type = compute
cinder_service_type = volumev2
swift_service_type = object-store
heat_service_type = orchestration
neutron_service_type = network
trove_volume_support = True
block_device_mapping = vdb
device_path = /dev/vdb
mount_point = /var/lib/mysql
volume_time_out=30
server_delete_time_out=480
use_nova_server_config_drive = True
taskmanager_manager=trove.taskmanager.manager.Manager
exists_notification_transformer = trove.extensions.mgmt.instances.models.NovaNotificationTransformer
exists_notification_ticks = 30
notification_service_id = mysql:2f3ff068-2bfb-4f70-9a9d-a6bb65bc084b

# Trove DNS
trove_dns_support = False
dns_account_id = 123456
dns_auth_url = http://127.0.0.1:5000/v2.0
dns_username = user
dns_passkey = password
dns_ttl = 3600
dns_domain_name = 'trove.com.'
dns_domain_id = 11111111-1111-1111-1111-111111111111
dns_driver = trove.dns.designate.driver.DesignateDriver
dns_instance_entry_factory = trove.dns.designate.driver.DesignateInstanceEntryFactory
dns_endpoint_url = http://127.0.0.1/v1/
dns_service_type = dns

# Neutron
network_driver = trove.network.neutron.NeutronDriver
default_neutron_networks = {{ trove_infra_net_id }}

# Nova
nova_compute_url = {{ trove_nova_compute_url }}
nova_proxy_admin_user = {{ trove_service_user_name }}
nova_proxy_admin_pass = {{ trove_service_password }}
nova_proxy_admin_tenant_name = {{ trove_service_project_name }}

# Trove Security Groups for Instances
trove_security_groups_support = True
trove_security_group_rule_cidr = 0.0.0.0/0

# Guest related conf
agent_heartbeat_time = 10
agent_call_low_timeout = 5
agent_call_high_timeout = 150
agent_replication_snapshot_timeout = 36000

# Whether to use nova's contrib api for create server with volume
use_nova_server_volume = False

network_label_regex = .*
#ip_regex = ^(15.|123.)
#black_list_regex = ^(10.0.0.)

# Datastore templates
template_path = /etc/trove/templates/
pydev_debug = disabled

# ================= Guestagent related ========================
guest_config = /etc/trove/trove-guestagent.conf
# Use 'guest_info = /etc/guest_info' for pre-Kilo compatibility
guest_info = guest_info.conf
# Use 'injected_config_location = /etc/trove' for pre-Kilo compatibility
injected_config_location = /etc/trove/conf.d
#cloudinit_location = /etc/trove/cloudinit

[database]
connection = "{{ trove_galera_connection_string }}"
idle_timeout = 3600

[profiler]
enabled = {{ trove_profiler_enabled }}
# If False doesn't trace SQL requests.
#trace_sqlalchemy = True

[oslo_messaging_rabbit]
rabbit_use_ssl={{ trove_rabbitmq_use_ssl }}

[mysql]
tcp_ports = 3306
volume_support = True
device_path = /dev/vdb

[redis]
tcp_ports = 6379
# redis uses local storage
volume_support = True
# default device_path = None

[cassandra]
tcp_ports = 7000, 7001, 9042, 9160
volume_support = True
device_path = /dev/vdb

[couchbase]
tcp_ports = 8091, 8092, 4369, 11209-11211, 21100-21199
volume_support = True
device_path = /dev/vdb

[mongodb]
volume_support = True
device_path = /dev/vdb

[vertica]
tcp_ports = 5433, 5434, 22, 5444, 5450, 4803
udp_ports = 5433, 4803, 4804, 6453
volume_support = True
device_path = /dev/vdb
mount_point = /var/lib/vertica
taskmanager_strategy = trove.common.strategies.cluster.experimental.vertica.taskmanager.VerticaTaskManagerStrategy
