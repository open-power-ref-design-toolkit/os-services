---
# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#TODO(evrardjp): Replace the next 2 tasks by a standard apt with cache
#when https://github.com/ansible/ansible-modules-core/pull/1517 is merged
#in 1.9.x or we move to 2.0 (if tested working)
- name: Check apt last update file
  stat:
    path: /var/cache/apt
  register: apt_cache_stat
  when:
    - ansible_pkg_mgr == 'apt'

- name: Update apt if needed
  apt:
    update_cache: yes
  when:
    - ansible_pkg_mgr == 'apt'
    - "ansible_date_time.epoch|float - apt_cache_stat.stat.mtime > {{cache_timeout}}"

- name: Remove known problem packages
  package:
    name: "{{ item }}"
    state: absent
  register: remove_packages
  until: remove_packages|success
  retries: 5
  delay: 2
  with_items: "{{ pip_install_remove_distro_packages }}"

# Under CentOS, this will add the repo and its key to the keyring
# Under Ubuntu, this will only add the key
- name: Install external repo key with package
  package:
    name: "{{ pip_install_external_repo_key_package }}"
    state: "{{ pip_install_external_repo_key_package_state | default('present') }}"
  when: user_external_repo_key is not defined
  tags:
    - add-repo-keys

- name: Install repo for distro binaries
  apt_repository:
    repo: "{{ uca_repo }}"
    state: present
    update_cache: yes
    filename: "{{ uca_apt_source_list_filename | default(omit) }}"
  register: uca_add_repo
  until: uca_add_repo|success
  retries: 5
  delay: 2
  when:
    - ansible_pkg_mgr == 'apt'
    - uca_enable
  tags:
    - add-uca-repo

- name: Install external repo key manually (apt)
  apt_key:
    id: "{{ item.id | default(omit) }}"
    keyserver: "{{ item.keyserver | default(omit) }}"
    url: "{{ item.url | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  register: add_keys
  until: add_keys|success
  retries: 5
  delay: 2
  with_items: "{{ user_external_repo_keys_list }}"
  when:
    - ansible_pkg_mgr == 'apt'
    - user_external_repo_keys_list is defined
  tags:
    - add-repo-keys

- name: Install external repo key manually (rpm)
  rpm_key:
    key: "{{ item.key }}"
    validate_certs: "{{ item.validate_certs | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  register: add_keys
  until: add_keys|success
  retries: 5
  delay: 2
  with_items: "{{ user_external_repo_keys_list }}"
  when:
    - ansible_pkg_mgr == 'yum'
    - user_external_repo_keys_list is defined
  tags:
    - add-repo-keys

- name: Install external repo manually (apt)
  apt_repository:
    repo: "{{ item.repo }}"
    state: "{{ item.state | default('present') }}"
    update_cache: yes
    filename: "{{ item.filename | default(omit) }}"
  register: use_external_repo_apt
  until: use_external_repo_apt|success
  retries: 5
  delay: 2
  with_items: "{{ user_external_repos_list }}"
  when:
    - ansible_pkg_mgr == 'apt'
    - user_external_repos_list is defined
  tags:
    - add-external-repo

- name: Install external repo manually (yum)
  yum_repository:
    name: "{{ item.name }}"
    description: "{{ item.description | default(omit) }}"
    baseurl: "{{ item.baseurl | default(omit) }}"
    gpgkey: "{{ item.gpgkey | default(omit) }}"
    gpgcheck: "{{ item.gpgcheck | default(omit) }}"
    enabled: "{{ item.enabled | default('yes') }}"
  register: use_external_repo_yum
  until: use_external_repo_yum|success
  retries: 5
  delay: 2
  with_items: "{{ user_external_repos_list }}"
  when:
    - ansible_pkg_mgr == 'yum'
    - user_external_repos_list is defined
  tags:
    - add-external-repo

#- name: Install packages
#  package:
#    name: "{{ item }}"
#    state: "{{ pip_install_package_state }}"
#  register: install_packages
#  until: install_packages|success
#  retries: 5
#  delay: 2
#  with_items: "{{ pip_install_distro_packages }}"

# Try installing apt packages. If this fails, retry after
# updating apt
- name: Install apt packages
  apt:
    pkg: "{{ item }}"
    state: "{{ pip_install_package_state }}"
  register: install_pkgs_result
  ignore_errors: yes
  with_items: "{{ pip_install_distro_packages }}"
  when:
    - ansible_pkg_mgr == 'apt'

# This tries to reload the UCA since it maybe corrupt and the source of the errors
- name: Reload UCA
  shell: |
    # Loop until these three files are present:
    # ubuntu-cloud.archive.canonical.com_ubuntu_dists_xenial-updates_newton_main_binary-ppc64el_Packages
    # ubuntu-cloud.archive.canonical.com_ubuntu_dists_xenial-updates_newton_Release
    # ubuntu-cloud.archive.canonical.com_ubuntu_dists_xenial-updates_newton_Release.gpg

    APT_DIR='/var/lib/apt/lists'
    UCA_FILES_PAT='ubuntu-cloud.archive.canonical.com_ubuntu_dists_*-updates_*_*'
    FIND_CMD="find $APT_DIR -name $UCA_FILES_PAT"

    FILE_COUNT=$($FIND_CMD | wc -w)
    if [ $FILE_COUNT -gt 0 ]; then
      while [ $FILE_COUNT -lt 3 ]; do
        echo "Sleep"
        sleep 120
        echo "Remove existing files."
        rm $APT_DIR/$UCA_FILES_PAT
        echo "Update apt."
        apt-get update
        FILE_COUNT=$($FIND_CMD | wc -w)
      done
    fi
  args:
    executable: /bin/bash
  when:
    - ansible_pkg_mgr == 'apt'
    - install_pkgs_result|failed

# If installing apt packages failed earlier, retry after
# updating apt cache
- name: Retry installing apt packages, if failed earlier
  apt:
    pkg: "{{ item }}"
    state: "{{ pip_install_package_state }}"
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: "{{ pip_install_distro_packages }}"
  when:
    - ansible_pkg_mgr == 'apt'
    - install_pkgs_result|failed
