diff --git a/trove/guestagent/datastore/experimental/postgresql/service.py b/trove/guestagent/datastore/experimental/postgresql/service.py
index 7ac3e47..91892ed 100644
--- a/trove/guestagent/datastore/experimental/postgresql/service.py
+++ b/trove/guestagent/datastore/experimental/postgresql/service.py
@@ -60,6 +60,7 @@ class PgSqlApp(object):
         revision_dir = guestagent_utils.build_file_path(
             os.path.dirname(self.pgsql_config),
             ConfigurationManager.DEFAULT_STRATEGY_OVERRIDES_SUB_DIR)
+        LOG.debug("PgSqlApp: revision_dir=%s" % revision_dir)
         self.configuration_manager = ConfigurationManager(
             self.pgsql_config, self.pgsql_owner, self.pgsql_owner,
             PropertiesCodec(
@@ -120,9 +121,11 @@ class PgSqlApp(object):
     def _find_config_file(self, name_pattern):
         version_base = guestagent_utils.build_file_path(self.pgsql_config_dir,
                                                         self.pg_version[1])
-        return sorted(operating_system.list_files_in_directory(
+        flist = sorted(operating_system.list_files_in_directory(
             version_base, recursive=True, pattern=name_pattern,
             as_root=True), key=len)[0]
+        LOG.debug("_find_config_file: name_pattern=%s, flist=%s" % (name_pattern, str(flist)))
+        return flist
 
     @property
     def pgsql_config_dir(self):
@@ -140,6 +143,7 @@ class PgSqlApp(object):
         return PgSqlAdmin(self.get_current_admin_user())
 
     def update_overrides(self, context, overrides, remove=False):
+        LOG.debug("update_overrides: overrides=%s remove=%s" % (str(overrides), str(remove)))
         if remove:
             self.configuration_manager.remove_user_override()
         elif overrides:
@@ -158,6 +162,7 @@ class PgSqlApp(object):
         return models.PostgreSQLUser(self.default_superuser_name)
 
     def apply_overrides(self, context, overrides):
+        LOG.debug("apply_overrides: %s" % str(overrides))
         self.reload_configuration()
 
     def reload_configuration(self):
@@ -176,6 +181,7 @@ class PgSqlApp(object):
         """Reset the PgSql configuration to the one given.
         """
         config_contents = configuration['config_contents']
+        LOG.debug("reset_configuration: config_contents=%s" % str(config_contents))
         self.configuration_manager.save_configuration(config_contents)
 
     def start_db_with_conf_changes(self, context, config_contents):
@@ -183,6 +189,7 @@ class PgSqlApp(object):
         if self.status.is_running:
             raise RuntimeError(_("The service is still running."))
 
+        LOG.debug("start_db_with_conf_changes: config_contents=%s" % str(config_contents))
         self.configuration_manager.save_configuration(config_contents)
         # The configuration template has to be updated with
         # guestagent-controlled settings.
@@ -201,6 +208,7 @@ class PgSqlApp(object):
             'unix_socket_directories': self._quote(self.pgsql_run_dir),
             'listen_addresses': self._quote(','.join(self.LISTEN_ADDRESSES)),
             'port': cfg.get_configuration_property('postgresql_port')}
+        LOG.debug("apply_initial_guestagent_configuration: file_locations=%s" % str(file_locations))
         self.configuration_manager.apply_system_override(file_locations)
         self._apply_access_rules()
 
@@ -386,11 +393,13 @@ class PgSqlApp(object):
             self.service_candidates, CONF.state_change_wait_time)
 
     def start_db(self, enable_on_boot=True, update_db=False):
+        LOG.debug("start_db: state_change_wait_time=%s" % str(CONF.state_change_wait_time))
         self.status.start_db_service(
             self.service_candidates, CONF.state_change_wait_time,
             enable_on_boot=enable_on_boot, update_db=update_db)
 
     def stop_db(self, do_not_start_on_reboot=False, update_db=False):
+        LOG.debug("stop_db: state_change_wait_time=%s" % str(CONF.state_change_wait_time))
         self.status.stop_db_service(
             self.service_candidates, CONF.state_change_wait_time,
             disable_on_boot=do_not_start_on_reboot, update_db=update_db)
