diff --git a/trove/guestagent/datastore/mysql_common/service.py b/trove/guestagent/datastore/mysql_common/service.py
index fe8358a..466ba9d 100644
--- a/trove/guestagent/datastore/mysql_common/service.py
+++ b/trove/guestagent/datastore/mysql_common/service.py
@@ -102,7 +102,7 @@ def clear_expired_password():
     if m:
         try:
             out, err = utils.execute("mysqladmin", "-p%s" % m.group(1),
-                                     "password", "", run_as_root=True,
+                                     "password", "", "reload", run_as_root=True,
                                      root_helper="sudo")
         except exception.ProcessExecutionError:
             LOG.exception(_("Cannot change mysql password."))
@@ -181,9 +181,11 @@ class BaseLocalSqlClient(object):
     def __init__(self, engine, use_flush=True):
         self.engine = engine
         self.use_flush = use_flush
+        LOG.debug("BaseLocalSqlClient.init: engine=%s, use_flush=%s" % (str(engine), str(use_flush)))
 
     def __enter__(self):
         self.conn = self.engine.connect()
+        LOG.debug("BaseLocalSqlClient.enter conn=%s" % (str(self.conn)))
         self.trans = self.conn.begin()
         return self.conn
 
@@ -198,6 +200,7 @@ class BaseLocalSqlClient(object):
         self.conn.close()
 
     def execute(self, t, **kwargs):
+        LOG.debug("BaseLocalSqlClient.execute: statement=%s, args=%s" % (t, str(kwargs)))
         try:
             return self.conn.execute(t, kwargs)
         except Exception:
@@ -215,6 +218,8 @@ class BaseMySqlAdmin(object):
         self._local_sql_client = local_sql_client
         self._mysql_root_access = mysql_root_access
         self._mysql_app = mysql_app(local_sql_client)
+        LOG.debug("BaseMySqlAdmin: local_sql_client=%s, mysql_root_access=%s, mysql_app=%s" %
+                  (str(local_sql_client), str(mysql_root_access), str(mysql_app)))
 
     @property
     def local_sql_client(self):
@@ -415,6 +420,7 @@ class BaseMySqlAdmin(object):
         """Enable the root user global access and/or
            reset the root password.
         """
+        LOG.debug("BaseMySqlAdmin: enable_root")
         return self.mysql_root_access.enable_root(root_password)
 
     def disable_root(self):
@@ -425,7 +431,7 @@ class BaseMySqlAdmin(object):
     def list_databases(self, limit=None, marker=None, include_marker=False):
         """List databases the user created on this mysql instance."""
         LOG.debug("---Listing Databases---")
-        ignored_database_names = "'%s'" % "', '".join(cfg.get_ignored_dbs())
+        ignored_database_names = "'sys', '%s'" % "', '".join(cfg.get_ignored_dbs())
         LOG.debug("The following database names are on ignore list and will "
                   "be omitted from the listing: %s" % ignored_database_names)
         databases = []
@@ -661,12 +667,14 @@ class BaseMySqlApp(object):
         g = sql_query.Grant(permissions='ALL', user=ADMIN_USER_NAME,
                             host=localhost, grant_option=True, clear=password)
         t = text(str(g))
+        LOG.debug("Client sql_query statement=%s" % t)
         client.execute(t)
         LOG.debug("Trove admin user '%s' created." % ADMIN_USER_NAME)
 
     @staticmethod
     def _generate_root_password(client):
         """Generate and set a random root password and forget about it."""
+        LOG.debug("Generating mysql root password")
         localhost = "localhost"
         uu = sql_query.SetPassword(
             models.MySQLUser.root_username, host=localhost,
@@ -691,12 +699,14 @@ class BaseMySqlApp(object):
         self.start_mysql()
 
     def secure(self, config_contents):
-        LOG.debug("Securing MySQL now.")
+        LOG.debug("Securing MySQL now - config_contents=%s" % config_contents)
         clear_expired_password()
         LOG.debug("Generating admin password.")
         admin_password = utils.generate_random_password()
+
         engine = sqlalchemy.create_engine(
             CONNECTION_STR_FORMAT % ('root', ''), echo=True)
+
         with self.local_sql_client(engine, use_flush=False) as client:
             self._create_admin_user(client, admin_password)
 
@@ -714,6 +724,8 @@ class BaseMySqlApp(object):
         LOG.debug("MySQL secure complete.")
 
     def _reset_configuration(self, configuration, admin_password=None):
+        LOG.debug("_reset_configuration: configuration=%s, admin_password=%s" %
+                  (configuration, admin_password))
         if not admin_password:
             # Take the current admin password from the base configuration file
             # if not given.
@@ -1031,6 +1043,8 @@ class BaseMySqlRootAccess(object):
     def __init__(self, local_sql_client, mysql_app):
         self._local_sql_client = local_sql_client
         self._mysql_app = mysql_app
+        LOG.debug("BaseMySqlRootAccess: __init__ local_sql_client=%s, mysql_app=%s" %
+                  (str(local_sql_client), str(mysql_app)))
 
     @property
     def mysql_app(self):
