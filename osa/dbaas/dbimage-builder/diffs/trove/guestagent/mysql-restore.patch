diff --git a/trove/guestagent/strategies/restore/mysql_impl.py b/trove/guestagent/strategies/restore/mysql_impl.py
index 2d206ac..d96f797 100644
--- a/trove/guestagent/strategies/restore/mysql_impl.py
+++ b/trove/guestagent/strategies/restore/mysql_impl.py
@@ -41,17 +41,12 @@ class MySQLRestoreMixin(object):

     # Reset the root password in a single transaction with 'FLUSH PRIVILEGES'
     # to ensure we never leave database wide open without 'grant tables'.
-    RESET_ROOT_MYSQL_COMMANDS = ("START TRANSACTION;",
-                                 "UPDATE `mysql`.`user` SET"
-                                 " `password`=PASSWORD('')"
-                                 " WHERE `user`='root'"
-                                 " AND `host` = 'localhost';",
-                                 "FLUSH PRIVILEGES;",
-                                 "COMMIT;")
+    RESET_ROOT_MYSQL_COMMANDS = ("SET PASSWORD FOR "
+                                "'root'@'localhost'=PASSWORD('');")
     # This is a suffix MySQL appends to the file name given in
     # the '--log-error' startup parameter.
     _ERROR_LOG_SUFFIX = '.err'
-    _ERROR_MESSAGE_PATTERN = re.compile("^ERROR:\s+.+$")
+    _ERROR_MESSAGE_PATTERN = re.compile("ERROR")

     def mysql_is_running(self):
         try:
@@ -80,13 +75,15 @@ class MySQLRestoreMixin(object):
             raise exc

     def _start_mysqld_safe_with_init_file(self, init_file, err_log_file):
-        child = pexpect.spawn("sudo mysqld_safe"
-                              " --skip-grant-tables"
-                              " --skip-networking"
-                              " --init-file='%s'"
-                              " --log-error='%s'" %
-                              (init_file.name, err_log_file.name)
-                              )
+        run_dir = "/var/run/mysqld"
+        if not os.path.exists(run_dir):
+            utils.execute("mkdir", run_dir,
+                          run_as_root=True, root_helper="sudo")
+            utils.execute("chown", "mysql:mysql", run_dir, err_log_file.name,
+                                 run_as_root=True, root_helper="sudo")
+        child = pexpect.spawn(
+            "sudo mysqld_safe --init-file=%s --log-error=%s" %
+            (init_file.name, err_log_file.name))
         try:
             i = child.expect(['Starting mysqld daemon'])
             if i == 0:
@@ -134,10 +131,10 @@ class MySQLRestoreMixin(object):
         """

         with tempfile.NamedTemporaryFile(mode='w') as init_file:
+            operating_system.write_file(init_file.name,
+                                        self.RESET_ROOT_MYSQL_COMMANDS)
             operating_system.chmod(init_file.name, FileMode.ADD_READ_ALL,
                                    as_root=True)
-            self._writelines_one_per_line(init_file,
-                                          self.RESET_ROOT_MYSQL_COMMANDS)
             # Do not attempt to delete the file as the 'trove' user.
             # The process writing into it may have assumed its ownership.
             # Only owners can delete temporary

