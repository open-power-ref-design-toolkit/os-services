diff --git a/trove/guestagent/datastore/experimental/postgresql/manager.py b/trove/guestagent/datastore/experimental/postgresql/manager.py
index 4206b8a..8185783 100644
--- a/trove/guestagent/datastore/experimental/postgresql/manager.py
+++ b/trove/guestagent/datastore/experimental/postgresql/manager.py
@@ -72,6 +72,8 @@ class Manager(
             self.GUEST_LOG_DEFS_GENERAL_LABEL, self.PGSQL_OWNER,
             datastore_dir=datastore_dir)
         general_log_dir, general_log_filename = os.path.split(general_log_file)
+        LOG.debug("datastore_log_defs: general_log_file = %s, long_query_time=%s" %
+                  (general_log_file, str(long_query_time)))
         return {
             self.GUEST_LOG_DEFS_GENERAL_LABEL: {
                 self.GUEST_LOG_TYPE_LABEL: guest_log.LogType.USER,
@@ -96,6 +98,7 @@ class Manager(
     def do_prepare(self, context, packages, databases, memory_mb, users,
                    device_path, mount_point, backup_info, config_contents,
                    root_password, overrides, cluster_config, snapshot):
+
         pgutil.PG_ADMIN = self.PG_BUILTIN_ADMIN
         self.install(context, packages)
         self.stop_db(context)
@@ -105,7 +108,8 @@ class Manager(
             if os.path.exists(mount_point):
                 device.migrate_data(mount_point)
             device.mount(mount_point)
-        self.configuration_manager.save_configuration(config_contents)
+
+        self.save_config(config_contents)
         self.apply_initial_guestagent_configuration()
 
         if backup_info:
@@ -126,12 +130,13 @@ class Manager(
     def _secure(self, context):
         # Create a new administrative user for Trove and also
         # disable the built-in superuser.
+        LOG.info("Creating user os_admin and database os_admin_db")
         os_admin_db = models.PostgreSQLSchema(self.ADMIN_USER)
         self._create_database(context, os_admin_db)
         self._create_admin_user(context, databases=[os_admin_db])
         pgutil.PG_ADMIN = self.ADMIN_USER
         postgres = models.PostgreSQLRootUser()
-        self.alter_user(context, postgres, 'NOSUPERUSER', 'NOLOGIN')
+#        self.alter_user(context, postgres, 'NOSUPERUSER', 'NOLOGIN')
 
     def create_backup(self, context, backup_info):
         with EndNotification(context):
diff --git a/trove/guestagent/datastore/experimental/postgresql/pgutil.py b/trove/guestagent/datastore/experimental/postgresql/pgutil.py
index 43eb637..7ac1f18 100644
--- a/trove/guestagent/datastore/experimental/postgresql/pgutil.py
+++ b/trove/guestagent/datastore/experimental/postgresql/pgutil.py
@@ -168,7 +168,7 @@ class UserQuery(object):
         create_clause = "CREATE USER \"{name}\"".format(name=name)
         with_clause = cls._build_with_clause(
             password, encrypt_password, *options)
-        return ''.join([create_clause, with_clause])
+        return ' '.join([create_clause, with_clause])
 
     @classmethod
     def _build_with_clause(cls, password, encrypt_password=None, *options):
@@ -203,7 +203,7 @@ class UserQuery(object):
         alter_clause = "ALTER USER \"{name}\"".format(name=name)
         with_clause = cls._build_with_clause(
             password, encrypt_password, *options)
-        return ''.join([alter_clause, with_clause])
+        return ' '.join([alter_clause, with_clause])
 
     @classmethod
     def update_name(cls, old, new):
diff --git a/trove/guestagent/datastore/experimental/postgresql/service/config.py b/trove/guestagent/datastore/experimental/postgresql/service/config.py
index 644d368..d4134ba 100644
--- a/trove/guestagent/datastore/experimental/postgresql/service/config.py
+++ b/trove/guestagent/datastore/experimental/postgresql/service/config.py
@@ -58,6 +58,7 @@ class PgSqlConfig(PgSqlProcess):
         revision_dir = guestagent_utils.build_file_path(
             os.path.dirname(self.pgsql_config),
             ConfigurationManager.DEFAULT_STRATEGY_OVERRIDES_SUB_DIR)
+        LOG.debug("PgSqlConfig: revision_dir=%s" % revision_dir)
         self._configuration_manager = ConfigurationManager(
             self.pgsql_config, self.PGSQL_OWNER, self.PGSQL_OWNER,
             PropertiesCodec(
@@ -92,11 +93,35 @@ class PgSqlConfig(PgSqlProcess):
     def _find_config_file(self, name_pattern):
         version_base = guestagent_utils.build_file_path(self.CONFIG_BASE,
                                                         self.pg_version[1])
-        return sorted(operating_system.list_files_in_directory(
+        flist = sorted(operating_system.list_files_in_directory(
             version_base, recursive=True, pattern=name_pattern,
             as_root=True), key=len)[0]
+        LOG.debug("_find_config_file: name_pattern=%s, flist=%s" % (name_pattern, str(flist)))
+        return flist
+
+    def save_config(self, config_contents):
+        version = self.pg_version[1]
+        if version not in ('9.3', '9.4'):
+            LOG.debug("save_config: remove deprecated checkpoint_segments for Postgresql %s" % version)
+            config_contents = '#checkpoint_segments'.join(config_contents.split('checkpoint_segments'))
+
+            # Comment out a few fields, so that they can be set below.  Guards against multiple instances
+            config_contents = '#log_line_prefix'.join(config_contents.split('log_line_prefix'))
+            config_contents = '#log_timezone'.join(config_contents.split('log_timezone'))
+            config_contents = '#stats_temp_directory'.join(config_contents.split('stats_temp_directory'))
+            config_contents = '#timezone'.join(config_contents.split('timezone'))
+
+            # Set a few logging parameters
+            config_contents = config_contents.split('\n')
+            config_contents.append('log_line_prefix = \'%t [%p-%l] %q%u@%d \'')
+            config_contents.append('log_timezone = \'UTC\'')
+            config_contents.append('stats_temp_directory = \'/var/run/postgresql/%s-main.pg_stat_tmp\'' % version)
+            config_contents.append('timezone = \'UTC\'')
+            config_contents = '\n'.join(config_contents)
+        self.configuration_manager.save_configuration(config_contents)
 
     def update_overrides(self, context, overrides, remove=False):
+        LOG.debug("update_overrides: overrides=%s remove=%s" % (str(overrides), str(remove)))
         if remove:
             self.configuration_manager.remove_user_override()
         elif overrides:
@@ -110,20 +135,23 @@ class PgSqlConfig(PgSqlProcess):
         #
         # NOTE: Do not use the 'SET' command as it only affects the current
         # session.
+        LOG.debug("apply_overrides: %s" % str(overrides))
         pgutil.psql("SELECT pg_reload_conf()")
 
     def reset_configuration(self, context, configuration):
         """Reset the PgSql configuration to the one given.
         """
         config_contents = configuration['config_contents']
-        self.configuration_manager.save_configuration(config_contents)
+        LOG.debug("reset_configuration: config_contents=%s" % str(config_contents))
+        self.save_config(config_contents)
 
     def start_db_with_conf_changes(self, context, config_contents):
         """Starts the PgSql instance with a new configuration."""
         if PgSqlAppStatus.get().is_running:
             raise RuntimeError(_("The service is still running."))
 
-        self.configuration_manager.save_configuration(config_contents)
+        LOG.debug("start_db_with_conf_changes: config_contents=%s" % str(config_contents))
+        self.save_config(config_contents)
         # The configuration template has to be updated with
         # guestagent-controlled settings.
         self.apply_initial_guestagent_configuration()
@@ -141,6 +169,7 @@ class PgSqlConfig(PgSqlProcess):
             'unix_socket_directories': self._quote(self.UNIX_SOCKET_DIR),
             'listen_addresses': self._quote(','.join(self.LISTEN_ADDRESSES)),
             'port': CONF.postgresql.postgresql_port}
+        LOG.debug("file_locations=%s" % str(file_locations))
         self.configuration_manager.apply_system_override(file_locations)
         self._apply_access_rules()
 
@@ -221,12 +250,13 @@ class PgSqlConfig(PgSqlProcess):
             'wal_level': 'hot_standby',
             'archive_mode ': 'on',
             'max_wal_senders': 8,
-            'checkpoint_segments ': 8,
             'wal_keep_segments': 8,
             'archive_command': arch_cmd
         }
         if not self.pg_version[1] in ('9.3'):
             opts['wal_log_hints'] = 'on'
+        if self.pg_version[1] in ('9.6'):
+            opts['wal_level'] = 'replica'  # replica subsumes hot_standby which is removed
 
         self.configuration_manager.apply_system_override(
             opts, BACKUP_CFG_OVERRIDE)
diff --git a/trove/guestagent/datastore/experimental/postgresql/service/users.py b/trove/guestagent/datastore/experimental/postgresql/service/users.py
index 0c61bbe..8c8f494 100644
--- a/trove/guestagent/datastore/experimental/postgresql/service/users.py
+++ b/trove/guestagent/datastore/experimental/postgresql/service/users.py
@@ -51,6 +51,7 @@ class PgSqlUsers(PgSqlAccess):
             'CREATEROLE',
             'INHERIT',
             'REPLICATION',
+            'BYPASSRLS',
             'LOGIN']
 
     def _create_admin_user(self, context, databases=None):
diff --git a/trove/guestagent/strategies/replication/experimental/postgresql_impl.py b/trove/guestagent/strategies/replication/experimental/postgresql_impl.py
index 9942a67..e6ca988 100644
--- a/trove/guestagent/strategies/replication/experimental/postgresql_impl.py
+++ b/trove/guestagent/strategies/replication/experimental/postgresql_impl.py
@@ -280,8 +280,10 @@ class PostgresqlReplicationStreaming(
         opts = {'hot_standby': 'on',
                 'wal_level': 'hot_standby'}
         # wal_log_hints for pg_rewind is only supported in 9.4+
-        if self.pg_version[1] in ('9.4', '9.5'):
+        if self.pg_version[1] in ('9.4', '9.5', '9.6'):
             opts['wal_log_hints'] = 'on'
+        if self.pg_version[1] == '9.6':
+            opts['wal_level'] = 'replica'    # replica subsumes hot_standby which is removed
 
         service.configuration_manager.\
             apply_system_override(opts, SLAVE_STANDBY_OVERRIDE)
