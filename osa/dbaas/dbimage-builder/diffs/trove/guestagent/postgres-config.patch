diff --git a/trove/guestagent/datastore/experimental/postgresql/pgsql_query.py b/trove/guestagent/datastore/experimental/postgresql/pgsql_query.py
index 2afb086..bba61cd 100644
--- a/trove/guestagent/datastore/experimental/postgresql/pgsql_query.py
+++ b/trove/guestagent/datastore/experimental/postgresql/pgsql_query.py
@@ -100,7 +100,7 @@ class UserQuery(object):
         create_clause = "CREATE USER \"{name}\"".format(name=name)
         with_clause = cls._build_with_clause(
             password, encrypt_password, *options)
-        return ''.join([create_clause, with_clause])
+        return ' '.join([create_clause, with_clause])

     @classmethod
     def _build_with_clause(cls, password, encrypt_password=None, *options):
@@ -135,7 +135,7 @@ class UserQuery(object):
         alter_clause = "ALTER USER \"{name}\"".format(name=name)
         with_clause = cls._build_with_clause(
             password, encrypt_password, *options)
-        return ''.join([alter_clause, with_clause])
+        return ' '.join([alter_clause, with_clause])

     @classmethod
     def update_name(cls, old, new):
diff --git a/trove/guestagent/datastore/experimental/postgresql/service.py b/trove/guestagent/datastore/experimental/postgresql/service.py
index 7ac3e47..7fae124 100644
--- a/trove/guestagent/datastore/experimental/postgresql/service.py
+++ b/trove/guestagent/datastore/experimental/postgresql/service.py
@@ -284,12 +284,13 @@ class PgSqlApp(object):
             'wal_level': 'hot_standby',
             'archive_mode': 'on',
             'max_wal_senders': 8,
-            'checkpoint_segments': 8,
             'wal_keep_segments': 8,
             'archive_command': arch_cmd
         }
         if not self.pg_version[1] in ('9.3'):
             opts['wal_log_hints'] = 'on'
+        if self.pg_version[1] in ('9.6'):
+            opts['wal_level'] = 'replica'  # replica subsumes hot_standby which is removed

         self.configuration_manager.apply_system_override(
             opts, BACKUP_CFG_OVERRIDE)
@@ -400,6 +401,8 @@ class PgSqlApp(object):
         Force password encryption.
         Also disable the built-in superuser
         """
+        LOG.info("Creating user os_admin and database os_admin_db")
+
         password = utils.generate_random_password()

         os_admin_db = models.PostgreSQLSchema(self.ADMIN_USER)
@@ -594,7 +597,7 @@ class PgSqlAdmin(object):
     # Default set of options of an administrative account.
     ADMIN_OPTIONS = (
         'SUPERUSER', 'CREATEDB', 'CREATEROLE', 'INHERIT', 'REPLICATION',
-        'LOGIN'
+        'BYPASSRLS', 'LOGIN'
     )

     def __init__(self, user):
