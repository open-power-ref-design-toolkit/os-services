diff --git a/trove/guestagent/datastore/experimental/redis/manager.py b/trove/guestagent/datastore/experimental/redis/manager.py
index 34137a3..5b67783 100644
--- a/trove/guestagent/datastore/experimental/redis/manager.py
+++ b/trove/guestagent/datastore/experimental/redis/manager.py
@@ -50,11 +50,11 @@ class Manager(manager.Manager):
 
     def _perform_restore(self, backup_info, context, restore_location, app):
         """Perform a restore on this instance."""
-        LOG.info(_("Restoring database from backup %s.") % backup_info['id'])
+        LOG.info(_("Restoring database from backup %s."), backup_info['id'])
         try:
             backup.restore(context, backup_info, restore_location)
         except Exception:
-            LOG.exception(_("Error performing restore from backup %s.") %
+            LOG.exception(_("Error performing restore from backup %s."),
                           backup_info['id'])
             app.status.set_status(rd_instance.ServiceStatuses.FAILED)
             raise
@@ -192,11 +192,11 @@ class Manager(manager.Manager):
             self.replication.enable_as_slave(self._app, replica_info,
                                              slave_config)
         except Exception:
-            LOG.exception("Error enabling replication.")
+            LOG.exception(_("Error enabling replication."))
             raise
 
     def make_read_only(self, context, read_only):
-        LOG.debug("Executing make_read_only(%s)" % read_only)
+        LOG.debug("Executing make_read_only(%s)", read_only)
         self._app.make_read_only(read_only)
 
     def _get_repl_info(self):
@@ -208,10 +208,11 @@ class Manager(manager.Manager):
 
     def _get_repl_offset(self):
         repl_info = self._get_repl_info()
-        LOG.debug("Got repl info: %s" % repl_info)
+        LOG.debug("Got repl info: %s", repl_info)
         offset_key = '%s_repl_offset' % repl_info['role']
         offset = repl_info[offset_key]
-        LOG.debug("Found offset %s for key %s." % (offset, offset_key))
+        LOG.debug("Found offset %(offset)s for key %(key)s.",
+                  {'offset': offset, 'key': offset_key})
         return int(offset)
 
     def get_last_txn(self, context):
@@ -224,11 +225,11 @@ class Manager(manager.Manager):
         return self._get_repl_offset()
 
     def wait_for_txn(self, context, txn):
-        LOG.info(_("Waiting on repl offset '%s'.") % txn)
+        LOG.info(_("Waiting on repl offset '%s'."), txn)
 
         def _wait_for_txn():
             current_offset = self._get_repl_offset()
-            LOG.debug("Current offset: %s." % current_offset)
+            LOG.debug("Current offset: %s.", current_offset)
             return current_offset >= txn
 
         try:
diff --git a/trove/guestagent/datastore/experimental/redis/service.py b/trove/guestagent/datastore/experimental/redis/service.py
index 4b3d86a..45f16c0 100644
--- a/trove/guestagent/datastore/experimental/redis/service.py
+++ b/trove/guestagent/datastore/experimental/redis/service.py
@@ -24,7 +24,7 @@ from trove.common import exception
 from trove.common.i18n import _
 from trove.common import instance as rd_instance
 from trove.common.stream_codecs import PropertiesCodec, StringConverter
-from trove.common import utils as utils
+from trove.common import utils
 from trove.guestagent.common.configuration import ConfigurationManager
 from trove.guestagent.common.configuration import OneFileOverrideStrategy
 from trove.guestagent.common import guestagent_utils
@@ -107,8 +107,10 @@ class RedisApp(object):
     def _build_admin_client(self):
         password = self.get_configuration_property('requirepass')
         socket = self.get_configuration_property('unixsocket')
+        cmd = self.get_config_command_name()
 
-        return RedisAdmin(password=password, unix_socket_path=socket)
+        return RedisAdmin(password=password, unix_socket_path=socket,
+                          config_cmd=cmd)
 
     def install_if_needed(self, packages):
         """
@@ -125,8 +127,7 @@ class RedisApp(object):
         Install the redis server.
         """
         LOG.debug('Installing redis server.')
-        msg = "Creating %s." % system.REDIS_CONF_DIR
-        LOG.debug(msg)
+        LOG.debug("Creating %s.", system.REDIS_CONF_DIR)
         operating_system.create_directory(system.REDIS_CONF_DIR, as_root=True)
         pkg_opts = {}
         packager.pkg_install(packages, pkg_opts, TIME_OUT)
@@ -145,6 +146,8 @@ class RedisApp(object):
     def update_overrides(self, context, overrides, remove=False):
         if overrides:
             self.configuration_manager.apply_user_override(overrides)
+            self.admin = self._build_admin_client()
+            self.status = RedisAppStatus(self.admin)
 
     def apply_overrides(self, client, overrides):
         """Use the 'CONFIG SET' command to apply configuration at runtime.
@@ -167,6 +170,9 @@ class RedisApp(object):
             args_string = self._join_lists(
                 self._value_converter.to_strings(prop_args), ' ')
             client.config_set(prop_name, args_string)
+            self.admin = self._build_admin_client()
+            self.status = RedisAppStatus(self.admin)
+            client = self.admin
 
     def _join_lists(self, items, sep):
         """Join list items (including items from sub-lists) into a string.
@@ -223,9 +229,10 @@ class RedisApp(object):
         """Get current name of the 'CONFIG' command.
         """
         renamed_cmds = self.configuration_manager.get_value('rename-command')
-        for name_pair in renamed_cmds:
-            if name_pair[0] == 'CONFIG':
-                return name_pair[1]
+        if renamed_cmds:
+            for name_pair in renamed_cmds:
+                if name_pair[0] == 'CONFIG':
+                    return name_pair[1]
 
         return None
 
@@ -341,7 +348,7 @@ class RedisApp(object):
             slots = map(str, range(first_slot, last_slot + 1))
             group_size = 200
             while slots:
-                cmd = ([system.REDIS_CLI, 'cluster', 'addslots']
+                cmd = (['redis-cli', 'cluster', 'addslots']
                        + slots[0:group_size])
                 out, err = utils.execute_with_timeout(*cmd, run_as_root=True,
                                                       root_helper='sudo')
@@ -402,10 +409,10 @@ class RedisAdmin(object):
 
     DEFAULT_CONFIG_CMD = 'CONFIG'
 
-    def __init__(self, password=None, unix_socket_path=None):
+    def __init__(self, password=None, unix_socket_path=None, config_cmd=None):
         self.__client = redis.StrictRedis(
             password=password, unix_socket_path=unix_socket_path)
-        self.__config_cmd_name = self.DEFAULT_CONFIG_CMD
+        self.__config_cmd_name = config_cmd or self.DEFAULT_CONFIG_CMD
 
     def set_config_command_name(self, name):
         """Set name of the 'CONFIG' command or None for default.
@@ -424,7 +431,17 @@ class RedisAdmin(object):
         save_cmd = 'SAVE'
         last_save = self.__client.lastsave()
         LOG.debug("Starting Redis data persist")
-        if self.__client.bgsave():
+        save_ok = True
+        try:
+            save_ok = self.__client.bgsave()
+        except redis.exceptions.ResponseError as re:
+            # If an auto-save is in progress just use it, since it must have
+            # just happened
+            if "Background save already in progress" in str(re):
+                LOG.info(_("Waiting for existing background save to finish"))
+            else:
+                raise
+        if save_ok:
             save_cmd = 'BGSAVE'
 
             def _timestamp_changed():
@@ -443,7 +460,7 @@ class RedisAdmin(object):
         elif not self.__client.save():
             raise exception.BackupCreationError(_("Could not persist "
                                                 "Redis data (%s)") % save_cmd)
-        LOG.debug("Redis data persist (%s) completed" % save_cmd)
+        LOG.debug("Redis data persist (%s) completed", save_cmd)
 
     def set_master(self, host=None, port=None):
         self.__client.slaveof(host, port)
@@ -476,15 +493,17 @@ class RedisAdmin(object):
     def wait_until(self, key, wait_value, section=None, timeout=None):
         """Polls redis until the specified 'key' changes to 'wait_value'."""
         timeout = timeout or CONF.usage_timeout
-        LOG.debug("Waiting for Redis '%s' to be: %s." % (key, wait_value))
+        LOG.debug("Waiting for Redis '%(key)s' to be: %(value)s.",
+                  {'key': key, 'value': wait_value})
 
         def _check_info():
             redis_info = self.get_info(section)
             if key in redis_info:
                 current_value = redis_info[key]
-                LOG.debug("Found '%s' for field %s." % (current_value, key))
+                LOG.debug("Found '%(value)s' for field %(key)s.",
+                          {'value': current_value, 'key': key})
             else:
-                LOG.error(_('Output from Redis command: %s') % redis_info)
+                LOG.error(_('Output from Redis command: %s'), redis_info)
                 raise RuntimeError(_("Field %(field)s not found "
                                      "(Section: '%(sec)s').") %
                                    ({'field': key, 'sec': section}))
