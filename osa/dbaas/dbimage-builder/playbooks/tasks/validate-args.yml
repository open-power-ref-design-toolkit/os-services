---
# This task is invoked during the invocation of the playbook below:
#
# ansible-playbook -i host_file dbimage-make.yml -u ubuntu -c ssh
#
# This is invoked on the dibvm under the ubuntu user

# when a tasked is skipped, the register variable is updated

- name: Query apt repository for mariadb when "{{ dbName }}"
  shell: apt-cache show mariadb-server
  register: show_mariadb
  when: dbName == 'mariadb'

- name: Query apt repository for mongodb-server when "{{ dbName }}"
  shell: apt-cache show mongodb-server
  register: show_mongodb
  when: dbName == 'mongodb'

- name: Query apt repository for mysql-server when "{{ dbName }}"
  shell: apt-cache show mysql-server
  register: show_mysql
  when: dbName == 'mysql'

- name: Query apt repository for postgresql when "{{ dbName }}"
  shell: apt-cache show postgresql-9.5
  register: show_postgresql
  when: dbName == 'postgresql'

- name: Query apt repository for redis-server when "{{ dbName }}"
  shell: apt-cache show redis-server
  register: show_redis
  when: dbName == 'redis'

- name: Identify the apt-cache package data to be scanned
  set_fact:
    pkg_stdout_lines: "{{ item['stdout_lines'] }}"
  with_items:
    - "{{ show_mariadb }}"
    - "{{ show_mongodb }}"
    - "{{ show_mysql }}"
    - "{{ show_postgresql }}"
    - "{{ show_redis }}"
  when: item['stdout'] is defined

# This sets on the first instance of the package which is the most recent version

- name: Scan the apt-cache package data for the version number
  set_fact:
    pkgDistroVersion: "{{ item.split(': ', 1)[-1] }}"
  with_items: "{{ pkg_stdout_lines }}"
  when:
    - pkg_stdout_lines is defined
    - "'Version: ' in item"
    - pkgDistroVersion is not defined

- name: Compare distro version "{{ pkgDistroVersion }}" to user provided version "{{ dbVersion }}"
  set_fact:
    pkgVerified: "{{ pkgDistroVersion.split(':', 1)[-1].startswith( dbVersion ) | default(false) }}"
  failed_when: not pkgVerified

# This sets on the first instance of the package also but the name is the same for all

- name: Set distro package name for user specified database "{{ dbName }}"
  set_fact:
    pkgDistroName: "{{ item.split(': ', 1)[-1] }}"
  with_items: "{{ pkg_stdout_lines }}"
  when:
    - "'Package: ' in item"
    - pkgDistroName is not defined

- name: Set the short form of the database version
  set_fact:
    dbVersion: "{{ '.'.join(pkgDistroVersion.split(':', 1)[-1].split('.',2)[:-1]) | default('') }}"
  when: not dbVersion

- debug: var=dbVersion
