--- models.py.orig	2016-11-02 12:17:09.959819870 -0500
+++ models.py	2016-11-07 15:50:50.572100104 -0600
@@ -782,14 +782,27 @@
         LOG.debug("Begin _create_server_volume_individually for id: %s" %
                   self.id)
         server = None
-        volume_info = self._build_volume_info(datastore_manager,
+
+        #KVM disk re-order problem
+        volume_info1 = self._build_volume_info(datastore_manager,
+                                              volume_size=volume_size,
+                                              volume_type=volume_type,
+                                              device_name='vdb')
+        volume_info2 = self._build_volume_info(datastore_manager,
                                               volume_size=volume_size,
-                                              volume_type=volume_type)
-        block_device_mapping = volume_info['block_device']
+                                              volume_type=volume_type,
+                                              device_name='vdc')
+        block_device_mapping1 = volume_info1['block_device']
+        block_device_mapping2 = volume_info2['block_device']
+
+        mybdm = dict(block_device_mapping1.items() + block_device_mapping2.items())
+
+        LOG.debug("PTROVE: block map: %s" % mybdm)
+
         try:
             server = self._create_server(flavor_id, image_id, security_groups,
                                          datastore_manager,
-                                         block_device_mapping,
+                                         mybdm,
                                          availability_zone, nics, files)
             server_id = server.id
             # Save server ID.
@@ -800,19 +813,26 @@
             self._log_and_raise(e, msg, err)
         LOG.debug("End _create_server_volume_individually for id: %s" %
                   self.id)
-        return volume_info
+        return volume_info1
 
     def _build_volume_info(self, datastore_manager, volume_size=None,
-                           volume_type=None):
+                           volume_type=None, device_name=None):
         volume_info = None
         volume_support = self.volume_support
-        device_path = self.device_path
+
+        if device_name:
+            LOG.debug("PTROVE: dev name %s" % device_name)
+            device_path = "/dev/" + device_name
+        else:
+            LOG.debug("PTROVE: dev name %s" % device_name)
+            device_path = self.device_path
+
         mount_point = CONF.get(datastore_manager).mount_point
         LOG.debug("trove volume support = %s" % volume_support)
         if volume_support:
             try:
                 volume_info = self._create_volume(
-                    volume_size, volume_type, datastore_manager)
+                    volume_size, volume_type, datastore_manager, device_name)
             except Exception as e:
                 msg = _("Failed to create volume for instance %s") % self.id
                 err = inst_models.InstanceTasks.BUILDING_ERROR_VOLUME
@@ -840,7 +860,7 @@
         self.update_db(task_status=task_status)
         raise TroveError(message=message)
 
-    def _create_volume(self, volume_size, volume_type, datastore_manager):
+    def _create_volume(self, volume_size, volume_type, datastore_manager, device_name):
         LOG.debug("Begin _create_volume for id: %s" % self.id)
         volume_client = create_cinder_client(self.context)
         volume_desc = ("datastore volume for %s" % self.id)
@@ -862,20 +882,25 @@
         if v_ref.status in ['error']:
             raise VolumeCreationFailure()
         LOG.debug("End _create_volume for id: %s" % self.id)
-        return self._build_volume(v_ref, datastore_manager)
+        return self._build_volume(v_ref, datastore_manager, device_name)
 
-    def _build_volume(self, v_ref, datastore_manager):
+    def _build_volume(self, v_ref, datastore_manager, device_name):
         LOG.debug("Created volume %s" % v_ref)
         # The mapping is in the format:
         # <id>:[<type>]:[<size(GB)>]:[<delete_on_terminate>]
         # setting the delete_on_terminate instance to true=1
         mapping = "%s:%s:%s:%s" % (v_ref.id, '', v_ref.size, 1)
-        bdm = CONF.block_device_mapping
+
+        #KVM disk re-order problem
+        #bdm = CONF.block_device_mapping
+        bdm = device_name
         block_device = {bdm: mapping}
         created_volumes = [{'id': v_ref.id,
                             'size': v_ref.size}]
 
-        device_path = self.device_path
+        #KVM disk re-order problem
+        # device_path = self.device_path
+        device_path = "/dev/"+device_name
         mount_point = CONF.get(datastore_manager).mount_point
 
         LOG.debug("block_device = %(device)s\n"
