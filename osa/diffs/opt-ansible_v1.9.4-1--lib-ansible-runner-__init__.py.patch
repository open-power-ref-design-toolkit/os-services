diff -Naur a/opt/ansible_v1.9.4-1/lib/ansible/runner/__init__.py b/opt/ansible_v1.9.4-1/lib/ansible/runner/__init__.py
--- a/opt/ansible_v1.9.4-1/lib/ansible/runner/__init__.py	2016-06-17 16:15:29.496030215 -0500
+++ b/opt/ansible_v1.9.4-1/lib/ansible/runner/__init__.py	2016-06-17 09:15:09.075223159 -0500
@@ -303,8 +303,9 @@
             afo.write(data)
         except:
             raise errors.AnsibleError("failure encoding into utf-8")
-        afo.flush()
-        afo.close()
+        finally:
+            afo.flush()
+            afo.close()
 
         remote = conn.shell.join_path(tmp, name)
         try:
@@ -573,17 +574,7 @@
             fileno = None
 
         try:
-            self._new_stdin = new_stdin
-            if not new_stdin and fileno is not None:
-                try:
-                    self._new_stdin = os.fdopen(os.dup(fileno))
-                except OSError, e:
-                    # couldn't dupe stdin, most likely because it's
-                    # not a valid file descriptor, so we just rely on
-                    # using the one that was passed in
-                    pass
-
-            exec_rc = self._executor_internal(host, new_stdin)
+            exec_rc = self._executor_internal(host)
             if type(exec_rc) != ReturnData:
                 raise Exception("unexpected return type: %s" % type(exec_rc))
             # redundant, right?
@@ -660,7 +651,7 @@
 
         return inject
 
-    def _executor_internal(self, host, new_stdin):
+    def _executor_internal(self, host):
         ''' executes any module one or more times '''
 
         # We build the proper injected dictionary for all future
@@ -1383,11 +1374,13 @@
             fileno = None
 
         workers = []
+        fdes = []
         for i in range(self.forks):
             new_stdin = None
             if fileno is not None:
                 try:
                     new_stdin = os.fdopen(os.dup(fileno))
+                    fdes.append(new_stdin)
                 except OSError, e:
                     # couldn't dupe stdin, most likely because it's
                     # not a valid file descriptor, so we just rely on
@@ -1405,6 +1398,9 @@
             for worker in workers:
                 worker.terminate()
                 worker.join()
+        finally:
+            for f in fdes:
+                f.close()
 
         results = []
         try:
