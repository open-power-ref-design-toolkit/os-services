#!/bin/bash
#
# Copyright 2016 IBM Corp.
#
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

typeset prep_file=/tmp/output.diskprep
typeset sort_file=/tmp/output.diskprep.sorted

typeset out_file
typeset -i meta_iter=1
typeset -i disk_iter=1

typeset account_file=/tmp/output.account.diskprep
typeset container_file=/tmp/output.container.diskprep
typeset object_file=/tmp/output.object.diskprep

typeset account_file_sdname=/tmp/output.account.diskprep.sdname
typeset container_file_sdname=/tmp/output.container.diskprep.sdname
typeset object_file_sdname=/tmp/output.object.diskprep.sdname

typeset disk_list
typeset already_cleaned_disk_list
typeset already_setup_disk_list

typeset rootpart_device
typeset label_base

function find_rootpart_device
{
    typeset part

    part=`df --output=source / | tail -n 1 | awk -F/ '{print $3}'`
    rootpart_device=`echo $part | sed 's/[0-9]//g'`
}

function clear_disk_list
{
    disk_list=
    rm -f ${prep_file} 2>&1 >/dev/null
    rm -f ${sort_file} 2>&1 >/dev/null
}

function append_disk_list
{
    typeset pci_device=$1
    typeset disk_list
    typeset disk_name
    typeset -i by_pci=0
    typeset -i by_disk_name=0

    if [[ "$pci_device" == */dev/disk/by-path/* ]]; then
        by_pci=1
    fi

    if [[ "$pci_device" == */dev/sd* ]] ||
       [[ "$pci_device" == */dev/vd* ]] ||
       [[ "$pci_device" == */dev/nvme* ]]; then
        by_disk_name=1
    fi

    if [[ $by_pci -eq 0 ]] && [[ $by_disk_name -eq 0 ]]; then
        echo "Unknown pci_device value $PCI_DEVICE"
        exit 1
    fi

    if [[ $by_pci -ne 0 ]]; then
        # Expand the pci_device with a wildcard, to get
        # all the disks that are children of that pci.
        for device in $pci_device*
        do
            # The partitions are listed in the /dev/disk/by-path directory
            # as well.  They end in "-partX".  Those should not be appended
            # to the disk list.
            echo $device | grep "\-part" 2>&1 >/dev/null
            if [[ $? -eq 0 ]]; then
                continue
            fi

            # Discover which /dev/sdX names are associated with this pci path.
            disk_name=`readlink ${device} | awk -F/ '{print $3}'`
            echo $disk_name >>${prep_file}
        done
    elif [[ $by_disk_name -ne 0 ]]; then
        # This is a single device by name.  No need to expand a wildcard.
        # Do need to strip off the /dev/ prefix.
        disk_name=$pci_device
        echo $disk_name | awk -F/ '{print $3}' >>${prep_file}
    fi
}

function adjust_disk_list
{
    # Always silently avoid the rootpart_device.
    #
    # Use \b to terminate the pattern so that we only
    # remove exact matches of the pattern.
    if [[ -n $rootpart_device ]]; then
        sed -i "/${rootpart_device}\b/d" ${prep_file}
    fi

    # Initially those names may be sorted by pci-path but
    # we want to sort them by sdX, vdX, or nvmeX name.
    cat ${prep_file} |  grep -E "^sd|^vd|^nvme" | uniq | sort >${sort_file}

}

function set_disk_list_type
{
    typeset dl_type=$1

    # Read the sorted file to generate the in memory list.
    while read disk_name
    do
        if [[ -z $disk_list ]]; then
            disk_list="$disk_name"
        else
            disk_list="$disk_list $disk_name"
        fi
    done < ${sort_file}

    # Set the appropriate list and file contents by dl_type.
    case "$dl_type" in
        'account')
            out_file=${account_file}
            cp $sort_file $account_file_sdname
            ;;
        'container')
            out_file=${container_file}
            cp $sort_file $container_file_sdname
            ;;
        'object')
            out_file=${object_file}
            cp $sort_file $object_file_sdname
            ;;
    esac
}

function complete_disk_list
{
    typeset dl_type=$1

    adjust_disk_list
    set_disk_list_type $dl_type
}

function set_label_base
{
    typeset dl_type=$1

{% if account_matches_object | bool %}
    label_base="disk"
{% else %}
    # Set the appropriate list and file contents by dl_type.
    case "$dl_type" in
        'account')
            label_base="meta"
            ;;
        'container')
            label_base="meta"
            ;;
        'object')
            label_base="disk"
            ;;
        *)
            echo "Unknown dl_type value $dl_type"
            exit 1
            ;;
    esac
{% endif %}

}

# returns 0 for true and 1 for false.
function is_mounted
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    # The requirement for this grep is that it finds /dev/sda itself,
    # finds parts such as /dev/sda1 or /dev/sda2, but does not find
    # devices with a similar name such as /dev/sdaa.
    #
    # Thus the [1-9]? after the device name says the numbers may or
    # may not be present.  The $ at the end says the pattern is
    # immediately followed by a newline, which should eliminate
    # /dev/sdaa.
    mount | awk '{print $1}' | grep -E "${device}[1-9]?$"
    return $?
}

function do_umount
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset name

    # See is_mounted.
    for name in `mount | awk '{print $1}' | grep -E "${device}[1-9]?$"`
    do
        umount $name
    done
}

# returns 0 for true and 1 for false.
function is_lvm_physical_volume
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    pvdisplay | grep "${device}\b"
    return $?
}

function deactivate_lvm_volume_group
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset vg

    vg=`pvdisplay $device | grep "VG Name" | awk '{print $3}'`

    if [[ -n $vg ]]; then
        vgchange -an $vg
    fi
}

function remove_lvm_physical_volume
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    pvremove -ff -y $device
}

function zap_disk
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset dev_end
    typeset gpt_end

    sgdisk --zap-all $device
    sgdisk --clear --mbrtogpt $device
    dev_end=`blockdev --getsz $device`
    ((gpt_end=$dev_end-100))

    dd if=/dev/zero of=$device bs=1M count=1
    dd if=/dev/zero of=$device bs=512 count=100 seek=$gpt_end
}

function clean_disk
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset rc

    is_mounted $device
    rc=$?
    if [[ $rc -eq 0 ]] ; then
        do_umount $device
    fi

    is_lvm_physical_volume $device
    rc=$?
    if [[ $rc -eq 0 ]] ; then
        deactivate_lvm_volume_group $device
        remove_lvm_physical_volume $device
    fi
    zap_disk $device
}

function zap_disk_list
{
    typeset disk_name

    for disk_name in $disk_list
    do
        # Ensure these cleanup steps only ever execute once per disk.
        # Otherwise for the case where a disk is present on more than
        # one disk_list (account/container/object) it would be setup
        # and cleaned up once per list instead of once per disk.
        if [[ -n $already_cleaned_disk_list ]] &&
           [[ $already_cleaned_disk_list =~ $disk_name ]]; then
            continue
        fi

        # Cleanup old /etc/fstab entries from previous runs of the playbook
        # if necessary.
        sed --in-place "/LABEL=${disk_name}/d" /etc/fstab 2>&1 >/dev/null

        # Unmount the disk if mounted.
        # Clean off lvm if necessary.
        # Use sgdisk --zap-all and dd to wipe key
        # sections of the disk platter.
        clean_disk /dev/${disk_name}

        if [[ -z $already_cleaned_disk_list ]]; then
            already_cleaned_disk_list="$disk_name"
        else
            already_cleaned_disk_list="$already_cleaned_disk_list $disk_name"
        fi
    done
}


function process_disk_list
{
    typeset dl_type=$1
    typeset mount_point=$2
    typeset disk_name
    typeset disk_label
    typeset -i ndisks=1
    typeset -i nalready=1

    set_label_base $dl_type

{% if not report_only | bool %}
    # Skip any destructive steps if the playbook is running
    # in report_only mode.
    zap_disk_list
{% endif %}

    rm -f $out_file 2>&1 >/dev/null

    if [[ "${label_base}" == "meta" ]]; then
        iter=$meta_iter
    elif [[ "${label_base}" == "disk" ]]; then
        iter=$disk_iter
    else
        echo "Unknown label_base value ${label_base}."
        exit 1
    fi

    # If all the disks on this disk list have
    # already been processed, we just need to
    # update the outfile for this disk list.
    for disk_name in $disk_list
    do
        if [[ -n $already_setup_disk_list ]] &&
           [[ $already_setup_disk_list =~ $disk_name ]]; then
            ((nalready=$nalready+1))
        fi
        ((ndisks=$ndisks+1))
    done

    if [[ $ndisks -eq $nalready ]]; then
        iter=1
        for disk_name in $disk_list
        do
            disk_label=${label_base}${iter}

            # Generate a file used for <account | container | object>-disk-list
            # inventory updates.
            echo $disk_label >>${out_file}
            ((iter=$iter+1))
        done
    else
        for disk_name in $disk_list
        do
            # Ensure these setup steps only ever execute once per disk.
            # Otherwise for the case where a disk is present on more than
            # one disk_list (account/container/object) it would be setup
            # and cleaned up once per list instead of once per disk.
            if [[ -n $already_setup_disk_list ]] &&
                [[ $already_setup_disk_list =~ $disk_name ]]; then
                continue
            fi

            disk_label=${label_base}${iter}

{% if not report_only | bool %}
            # Skip any destructive steps if the playbook is running
            # in report_only mode.
            mkfs.xfs -f -i size=1024 -L ${disk_name} /dev/${disk_name}
            rc=$?
            if [[ $rc -ne 0 ]]; then
                echo "Unable to mkfs.xfs /dev/${disk_name}, rc=$rc"
                exit 1
            fi

            echo "LABEL=${disk_name} ${mount_point}/${disk_label} {{ mount_options }}" >>/etc/fstab
            mkdir -p /srv/node/${disk_label}
            mount /dev/${disk_name}
{% endif %}

            # Generate a file used for <account | container | object>-disk-list
            # inventory updates.
            echo $disk_label >>${out_file}

            if [[ -z $already_setup_disk_list ]]; then
                already_setup_disk_list="$disk_name"
            else
                already_setup_disk_list="$already_setup_disk_list $disk_name"
            fi

            ((iter=$iter+1))
        done

        if [[ "${label_base}" == "meta" ]]; then
            meta_iter=$iter
        elif [[ "${label_base}" == "disk" ]]; then
            disk_iter=$iter
        fi
    fi
}

find_rootpart_device

{% if account_devices is defined %}
clear_disk_list
{% for item in (account_devices | unique) %}
append_disk_list {{ item }}
{% endfor %}
complete_disk_list account
process_disk_list account {{ metadata_mount_point }}
{% endif %}

{% if container_devices is defined %}
clear_disk_list
{% for item in (container_devices | unique) %}
append_disk_list {{ item }}
{% endfor %}
complete_disk_list container
process_disk_list container {{ metadata_mount_point }}
{% endif %}

{% if object_devices is defined %}
clear_disk_list
{% for item in (object_devices | unique) %}
append_disk_list {{ item }}
{% endfor %}
complete_disk_list object
process_disk_list object {{ object_mount_point }}
{% endif %}

clear_disk_list

exit 0
